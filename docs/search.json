[{"path":"/articles/fiat.html","id":"countries","dir":"Articles","previous_headings":"","what":"Countries","title":"Fiat Boundaries","text":"retrive country boundaries (1 ), ISO codes, abbreviations names can used:","code":"am = aoi_get(country = \"New Zealand\") |>    plot(max.plot = 1) aoi_get(country = c(\"484\", \"USA\", \"CA\")) |>    plot(max.plot = 1)"},{"path":"/articles/fiat.html","id":"state","dir":"Articles","previous_headings":"","what":"State","title":"Fiat Boundaries","text":"","code":"aoi_get(state = \"CO\") |>    plot(max.plot = 1) aoi_get(state = c(\"CO\", \"Utah\")) |>    plot(max.plot = 1)"},{"path":"/articles/fiat.html","id":"county","dir":"Articles","previous_headings":"","what":"County","title":"Fiat Boundaries","text":"","code":"aoi_get(state = \"CO\", county = \"Larimer\") |>    plot(max.plot = 1) aoi_get(state = \"TX\", county = \"all\") |>    plot(max.plot = 1)"},{"path":"/articles/fiat.html","id":"fip","dir":"Articles","previous_headings":"","what":"FIP","title":"Fiat Boundaries","text":"","code":"aoi_get(fip = \"01\")  |>    plot(max.plot = 1) aoi_get(fip = \"01125\")  |>    plot(max.plot = 1)"},{"path":"/articles/fiat.html","id":"zipcode","dir":"Articles","previous_headings":"","what":"Zipcode","title":"Fiat Boundaries","text":"","code":"aoi_get(zipcode = \"80906\") |>    plot(max.plot = 1) #> [1] \"80906\" #>       zipcode      lat       lon #> 28229   80906 38.76568 -104.8716"},{"path":"/articles/fiat.html","id":"aggregate","dir":"Articles","previous_headings":"","what":"Aggregate","title":"Fiat Boundaries","text":"","code":"aoi_get(country = \"Asia\") |>    plot(max.plot = 1) aoi_get(country = \"Latin America & Caribbean\") |>    plot(max.plot = 1) aoi_get(state = \"conus\") |>    plot(max.plot = 1) aoi_get(state = \"south\") |>    plot(max.plot = 1)"},{"path":"/articles/fiat.html","id":"union","dir":"Articles","previous_headings":"","what":"Union","title":"Fiat Boundaries","text":"","code":"aoi_get(country = \"Latin America & Caribbean\", union = TRUE) |>    plot()"},{"path":"/articles/geocoding.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Geocoding","text":"default AOI::geocode behavior returns adata.frame “request” named input geo, x, y column along {method}_address score.","code":"geocode(\"Fort Collins\") |>   glimpse() #> Rows: 1 #> Columns: 5 #> $ request        <chr> \"Fort Collins\" #> $ score          <int> 100 #> $ arcgis_address <chr> \"Fort Collins, Colorado\" #> $ x              <dbl> -105.0766 #> $ y              <dbl> 40.58147"},{"path":"/articles/geocoding.html","id":"return-a-point-representation","dir":"Articles","previous_headings":"","what":"Return a POINT representation","title":"Geocoding","text":"basic return can converted POINT representation setting pt = TRUE. data returned crs specified function signature. default, AOI utilities act : can changed meet application needs: AOI::geocode setup take one request prior arguments apply:","code":"geocode(\"Fort Collins\", pt = TRUE) |>    glimpse() #> Rows: 1 #> Columns: 6 #> $ request        <chr> \"Fort Collins\" #> $ score          <int> 100 #> $ arcgis_address <chr> \"Fort Collins, Colorado\" #> $ geometry       <POINT [°]> POINT (-105.0766 40.58147) #> $ x              <dbl> -105.0766 #> $ y              <dbl> 40.58147 geocode(\"Fort Collins\", pt = TRUE, crs = 5070) |>    glimpse() #> Rows: 1 #> Columns: 6 #> $ request        <chr> \"Fort Collins\" #> $ score          <int> 100 #> $ arcgis_address <chr> \"Fort Collins, Colorado\" #> $ geometry       <POINT [m]> POINT (-760708 1988474) #> $ x              <dbl> -760708 #> $ y              <dbl> 1988474 geocode(c(\"Boulder\", \"Fort Collins\"), pt = TRUE, crs = 5070) |>    glimpse() #> Rows: 2 #> Columns: 6 #> $ request        <chr> \"Boulder\", \"Fort Collins\" #> $ score          <int> 100, 100 #> $ arcgis_address <chr> \"Boulder, Colorado\", \"Fort Collins, Colorado\" #> $ geometry       <POINT [m]> POINT (-783814.6 1927038), POINT (-760708 1988474) #> $ x              <dbl> -783814.6, -760708.0 #> $ y              <dbl> 1927038, 1988474"},{"path":"/articles/geocoding.html","id":"return-bounding-box-representation","dir":"Articles","previous_headings":"","what":"Return bounding box representation","title":"Geocoding","text":"Setting bbox = TRUE return bounding box representation geo input using following rules: geocoding method return extent input, POINT returned single geo passed extent returned, POLYGON generated multiple geo objects passed, POLYGON representing extent POINT(s) returned","code":""},{"path":"/articles/geocoding.html","id":"default-behavior","dir":"Articles","previous_headings":"Return bounding box representation","what":"Default behavior","title":"Geocoding","text":"","code":"geocode(\"Fort Collins\", bbox = TRUE)  |>    glimpse() #> Rows: 1 #> Columns: 6 #> $ request        <chr> \"Fort Collins\" #> $ score          <int> 100 #> $ arcgis_address <chr> \"Fort Collins, Colorado\" #> $ x              <dbl> -105.0766 #> $ y              <dbl> 40.58147 #> $ geometry       <POLYGON [°]> POLYGON ((-105.1606 40.4974..."},{"path":"/articles/geocoding.html","id":"multiple-inputs-return-a-single-bounding-box","dir":"Articles","previous_headings":"Return bounding box representation","what":"Multiple inputs return a single bounding box:","title":"Geocoding","text":"actually want extents multiple inputs, pass inputs lapply:","code":"# EPSG:5070 geocode(c(\"Boulder\", \"Fort Collins\"), bbox = TRUE, crs = 5070)  |>    aoi_map(returnMap = TRUE) lapply(c('Fort Collins', 'Boulder'), FUN = geocode, bbox = TRUE) |>   bind_rows() |>   aoi_map(returnMap = TRUE)"},{"path":"/articles/geocoding.html","id":"return-bounding-box-and-point-representations","dir":"Articles","previous_headings":"","what":"Return bounding box and POINT representations","title":"Geocoding","text":"Setting = TRUE return point bbox representation. bbox returned still follow rules:","code":"geocode('Fort Collins', all = TRUE) |>   aoi_map(returnMap = TRUE) geocode(geo = c('Fort Collins', 'Boulder'), all = TRUE) |>   aoi_map(returnMap = TRUE)"},{"path":"/articles/geocoding.html","id":"xy","dir":"Articles","previous_headings":"","what":"xy","title":"Geocoding","text":"Setting xy = TRUE return just XY coordinates geocoded point. useful applications shown later:","code":"geocode(\"Fort Collins\", xy = TRUE) #>          X          Y  #> -105.07662   40.58147 geocode(geo = \"Fort Collins\", xy = TRUE, crs = 5070) #>       X       Y  #> -760708 1988474"},{"path":"/articles/geocoding.html","id":"event-based","dir":"Articles","previous_headings":"","what":"Event based","title":"Geocoding","text":"Moving away just tidygeocdoing, AOI::geocode provides tha","code":"geocode(event = \"dday\") |>  aoi_map(returnMap = TRUE) geocode(event = \"Hurricane Harvey\", all = TRUE) |>   aoi_map(returnMap = TRUE)"},{"path":"/articles/geocoding.html","id":"reverse-geocoding","dir":"Articles","previous_headings":"","what":"Reverse Geocoding","title":"Geocoding","text":"Reverse geocoding act converting XY location named entity.","code":"# getting an xy input xy = geocode(\"UCSB\", xy = TRUE) geocode_rev(xy) #> # A tibble: 1 × 3 #>   address                                                                x     y #>   <chr>                                                              <dbl> <dbl> #> 1 University of California Santa Barbara Campus, University of Cali… -120.  34.4 geocode_rev(xy, pt = TRUE) #> Simple feature collection with 1 feature and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -119.8471 ymin: 34.4134 xmax: -119.8471 ymax: 34.4134 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 2 #>   address                                                         geometry #> * <chr>                                                        <POINT [°]> #> 1 University of California Santa Barbara Campus, Univ… (-119.8471 34.4134)"},{"path":"/articles/region.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Extents & discritizations","text":"core functions described aoi_ext builds specific extent around given POINT / coordinate set discritize discritizes extent/object. start, lets build 1000 meter extent around location called “Fort Collins”: , can see extent created!","code":"aoi_ext(geo = \"Fort Collins\", wh = 1000) #>       xmin       ymin       xmax       ymax  #> -105.08967   40.57283 -105.06605   40.59084"},{"path":"/articles/region.html","id":"add-bbox","dir":"Articles","previous_headings":"","what":"Add bbox","title":"Extents & discritizations","text":"AOI::geocode, returned object can represented POLYGON adding bbox = TRUE. helpful mapping:","code":"aoi_ext(geo = \"Fort Collins\", wh = 1000, bbox = TRUE) %>%    mapview::mapview()"},{"path":"/articles/region.html","id":"modify-both-diminisons","dir":"Articles","previous_headings":"","what":"Modify both diminisons","title":"Extents & discritizations","text":"Providing single value wh argument generates square extent. find rectangular extent, two value vector can passed:","code":"aoi_ext(geo = \"Fort Collins\", wh = c(2000, 1000), bbox = TRUE) %>%    mapview::mapview()"},{"path":"/articles/region.html","id":"use-xy","dir":"Articles","previous_headings":"","what":"Use XY","title":"Extents & discritizations","text":"relied providing place requires AOI::geocode run. Instead, can provide direct coordinate set xy vector:","code":"aoi_ext(xy = c(x = -119, y = 36), wh = 1000) #>       xmin       ymin       xmax       ymax  #> -119.01241   35.99131 -118.99023   36.00934"},{"path":"/articles/region.html","id":"units","dir":"Articles","previous_headings":"","what":"Units","title":"Extents & discritizations","text":"default measures made default AOI unit: can override defining units argument aoi_ext signiture. see 1km 1000m wh argument produce identical results:","code":"(AOI:::default_units) #> [1] \"meter\" identical( aoi_ext(geo = \"Fort Collins\", wh = 1, units = \"km\"),             aoi_ext(geo = \"Fort Collins\", wh = 1000) ) #> [1] TRUE"},{"path":"/articles/region.html","id":"area-discritizations","dir":"Articles","previous_headings":"","what":"Area discritizations","title":"Extents & discritizations","text":"many applications, getting extent part challenge. defining discretizion region. can done AOI::discritize function:","code":"aoi_ext(\"Fort Collins\", wh = c(10000, 20000)) %>%    discritize() #> $extent #>       xmin       ymin       xmax       ymax  #> -105.19630   40.40167 -104.95943   40.76188  #>  #> $dimension #> [1] 337 512 #>  #> $projection #> [1] \"GEOGCRS[\\\"WGS 84\\\",\\n    ENSEMBLE[\\\"World Geodetic System 1984 ensemble\\\",\\n        MEMBER[\\\"World Geodetic System 1984 (Transit)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G730)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G873)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G1150)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G1674)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G1762)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G2139)\\\"],\\n        ELLIPSOID[\\\"WGS 84\\\",6378137,298.257223563,\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n        ENSEMBLEACCURACY[2.0]],\\n    PRIMEM[\\\"Greenwich\\\",0,\\n        ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    CS[ellipsoidal,2],\\n        AXIS[\\\"geodetic latitude (Lat)\\\",north,\\n            ORDER[1],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        AXIS[\\\"geodetic longitude (Lon)\\\",east,\\n            ORDER[2],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    USAGE[\\n        SCOPE[\\\"Horizontal component of 3D system.\\\"],\\n        AREA[\\\"World.\\\"],\\n        BBOX[-90,-180,90,180]],\\n    ID[\\\"EPSG\\\",4326]]\""},{"path":"/articles/region.html","id":"diminsions","dir":"Articles","previous_headings":"","what":"Diminsions","title":"Extents & discritizations","text":"default, function uses AOI default discritization: can changed using dim argument:","code":"(AOI:::default_dim) #> [1] 512 aoi_ext(\"Fort Collins\", wh = c(10000, 20000)) %>%    discritize(dim = 1024) #> $extent #>       xmin       ymin       xmax       ymax  #> -105.19630   40.40167 -104.95943   40.76188  #>  #> $dimension #> [1]  673 1024 #>  #> $projection #> [1] \"GEOGCRS[\\\"WGS 84\\\",\\n    ENSEMBLE[\\\"World Geodetic System 1984 ensemble\\\",\\n        MEMBER[\\\"World Geodetic System 1984 (Transit)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G730)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G873)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G1150)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G1674)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G1762)\\\"],\\n        MEMBER[\\\"World Geodetic System 1984 (G2139)\\\"],\\n        ELLIPSOID[\\\"WGS 84\\\",6378137,298.257223563,\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n        ENSEMBLEACCURACY[2.0]],\\n    PRIMEM[\\\"Greenwich\\\",0,\\n        ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    CS[ellipsoidal,2],\\n        AXIS[\\\"geodetic latitude (Lat)\\\",north,\\n            ORDER[1],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        AXIS[\\\"geodetic longitude (Lon)\\\",east,\\n            ORDER[2],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    USAGE[\\n        SCOPE[\\\"Horizontal component of 3D system.\\\"],\\n        AREA[\\\"World.\\\"],\\n        BBOX[-90,-180,90,180]],\\n    ID[\\\"EPSG\\\",4326]]\""},{"path":"/articles/region.html","id":"crs","dir":"Articles","previous_headings":"","what":"CRS","title":"Extents & discritizations","text":"default expected input CRS EPSG:4326. also default output. can changed depending desired input output. CRS can extracted input, used. CRS extracted input, EPSG:4326 assumed assumed CRS can overridden in_crs argument","code":"# CRS inferred from input and changed to 5070 aoi_ext(\"Fort Collins\", wh = c(20000, 10000)) %>%    discritize(out_crs = 5070) #> $extent #>      xmin      ymin      xmax      ymax  #> -781559.4 1976585.3 -740107.0 2000454.5  #>  #> $dimension #> [1] 512 889 #>  #> $projection #> [1] \"PROJCRS[\\\"NAD83 / Conus Albers\\\",\\n    BASEGEOGCRS[\\\"NAD83\\\",\\n        DATUM[\\\"North American Datum 1983\\\",\\n            ELLIPSOID[\\\"GRS 1980\\\",6378137,298.257222101,\\n                LENGTHUNIT[\\\"metre\\\",1]]],\\n        PRIMEM[\\\"Greenwich\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        ID[\\\"EPSG\\\",4269]],\\n    CONVERSION[\\\"Conus Albers\\\",\\n        METHOD[\\\"Albers Equal Area\\\",\\n            ID[\\\"EPSG\\\",9822]],\\n        PARAMETER[\\\"Latitude of false origin\\\",23,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8821]],\\n        PARAMETER[\\\"Longitude of false origin\\\",-96,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8822]],\\n        PARAMETER[\\\"Latitude of 1st standard parallel\\\",29.5,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8823]],\\n        PARAMETER[\\\"Latitude of 2nd standard parallel\\\",45.5,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8824]],\\n        PARAMETER[\\\"Easting at false origin\\\",0,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8826]],\\n        PARAMETER[\\\"Northing at false origin\\\",0,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8827]]],\\n    CS[Cartesian,2],\\n        AXIS[\\\"easting (X)\\\",east,\\n            ORDER[1],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n        AXIS[\\\"northing (Y)\\\",north,\\n            ORDER[2],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n    USAGE[\\n        SCOPE[\\\"Data analysis and small scale data presentation for contiguous lower 48 states.\\\"],\\n        AREA[\\\"United States (USA) - CONUS onshore - Alabama; Arizona; Arkansas; California; Colorado; Connecticut; Delaware; Florida; Georgia; Idaho; Illinois; Indiana; Iowa; Kansas; Kentucky; Louisiana; Maine; Maryland; Massachusetts; Michigan; Minnesota; Mississippi; Missouri; Montana; Nebraska; Nevada; New Hampshire; New Jersey; New Mexico; New York; North Carolina; North Dakota; Ohio; Oklahoma; Oregon; Pennsylvania; Rhode Island; South Carolina; South Dakota; Tennessee; Texas; Utah; Vermont; Virginia; Washington; West Virginia; Wisconsin; Wyoming.\\\"],\\n        BBOX[24.41,-124.79,49.38,-66.91]],\\n    ID[\\\"EPSG\\\",5070]]\" # CRS inferred t1 = aoi_ext(\"Fort Collins\", wh = c(20000, 10000), crs = 5070, bbox = TRUE) %>%    discritize(out_crs = 5070) t1$extent #>      xmin      ymin      xmax      ymax  #> -781506.2 1976590.7 -740107.0 2000454.0  # Bad, assumed EPSG t2 = c(-781506.2, 1976590.7, -740107.0, 2000454.0) %>%    discritize(out_crs = 5070) #> Warning: Assuming the input is in CRS 4326 t2$extent #> xmin ymin xmax ymax  #>   NA   NA   NA   NA  # Explicit CRS named t3 = c(-781506.2, 1976590.7, -740107.0, 2000454.0)  %>%    discritize(in_crs = 5070, out_crs = 5070) t3$extent #>      xmin      ymin      xmax      ymax  #> -781506.2 -740107.0 1976590.7 2000454.0"},{"path":"/articles/region.html","id":"spatraster","dir":"Articles","previous_headings":"","what":"SpatRaster","title":"Extents & discritizations","text":"want gridded object future processing, can set spatrast = TRUE.","code":"aoi_ext(\"Fort Collins\", wh = c(20000, 10000)) %>%    discritize(spatrast = TRUE) #> class       : SpatRaster  #> dimensions  : 1345, 512, 1  (nrow, ncol, nlyr) #> resolution  : 0.0009239945, 0.0001339108  (x, y) #> extent      : -105.3144, -104.8413, 40.49154, 40.67165  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)"},{"path":"/articles/region.html","id":"passing-other-objects-","dir":"Articles","previous_headings":"","what":"Passing Other objects.","title":"Extents & discritizations","text":"Defining extent POINT wh argument one option can discritized. Others include AOI outputs, sf objects SpatVect SpatRast objects.","code":""},{"path":"/articles/region.html","id":"aoi-bbox-returns","dir":"Articles","previous_headings":"Passing Other objects.","what":"AOI BBOX returns","title":"Extents & discritizations","text":"","code":"geocode(c(\"Fort Collins\", \"Boulder\"), bbox = TRUE) %>%    discritize(spatrast = TRUE, dim = c(10,10)) #> class       : SpatRaster  #> dimensions  : 10, 4, 1  (nrow, ncol, nlyr) #> resolution  : 0.050655, 0.056573  (x, y) #> extent      : -105.2792, -105.0766, 40.01574, 40.58147  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)"},{"path":"/articles/region.html","id":"aoi-fiat-boundaries","dir":"Articles","previous_headings":"Passing Other objects.","what":"AOI fiat boundaries","title":"Extents & discritizations","text":"(really applies sf object!)","code":"aoi_get(state = \"OR\") %>%    discritize(spatrast = TRUE, dim = c(5,5)) #> class       : SpatRaster  #> dimensions  : 10, 5, 1  (nrow, ncol, nlyr) #> resolution  : 1.648007, 0.4307017  (x, y) #> extent      : -124.7035, -116.4635, 41.99208, 46.2991  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)"},{"path":"/articles/region.html","id":"other-spat-object","dir":"Articles","previous_headings":"Passing Other objects.","what":"Other Spat* object","title":"Extents & discritizations","text":"","code":"(r <- terra::rast(system.file(\"ex/elev.tif\", package=\"terra\")) ) #> class       : SpatRaster  #> dimensions  : 90, 95, 1  (nrow, ncol, nlyr) #> resolution  : 0.008333333, 0.008333333  (x, y) #> extent      : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source      : elev.tif  #> name        : elevation  #> min value   :       141  #> max value   :       547  # SpatRast discritize(r, spatrast = TRUE) #> class       : SpatRaster  #> dimensions  : 540, 512, 1  (nrow, ncol, nlyr) #> resolution  : 0.001546224, 0.001388889  (x, y) #> extent      : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  # SpatVect terra::vect(system.file(\"ex/lux.shp\", package=\"terra\")) %>%    discritize(spatrast = TRUE) #> class       : SpatRaster  #> dimensions  : 547, 512, 1  (nrow, ncol, nlyr) #> resolution  : 0.001531469, 0.001341525  (x, y) #> extent      : 5.74414, 6.528252, 49.44781, 50.18162  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mike Johnson. Author, maintainer. Justin Singh-Mohudpur. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Johnson M (2023). AOI: Areas Interest. R package version 0.3.0, https://github.com/mikejohnson51/AOI/.","code":"@Manual{,   title = {AOI: Areas of Interest},   author = {Mike Johnson},   year = {2023},   note = {R package version 0.3.0},   url = {https://github.com/mikejohnson51/AOI/}, }"},{"path":"/cran-checks.html","id":"test-environments","dir":"","previous_headings":"","what":"Test environments","title":"NA","text":"local MAC OS X install, R 3.5.1 ubuntu 12.04 (travis-ci), R 3.5.0 win-builder (“R-release”, “R-devel”)","code":""},{"path":"/cran-checks.html","id":"r-cmd-check-results","dir":"","previous_headings":"","what":"R CMD check results","title":"NA","text":"*ERRORs WARNINGs NOTEs local MAC OS X travis. *One NOTE build_win() *checking CRAN incoming feasibility … NOTE Maintainer: ‘Mike Johnson jmj00@ucsb.edu’ appears due first submission nothing can remove .","code":""},{"path":"/index.html","id":"aoi-","dir":"","previous_headings":"","what":"Generating Area's of Interest","title":"Generating Area's of Interest","text":"AOI helps create reproducible, programmatic boundaries analysis mapping workflows. package targets five main use cases:","code":""},{"path":"/index.html","id":"id_1-term-based-geocoding","dir":"","previous_headings":"","what":"1. Term based geocoding","title":"Generating Area's of Interest","text":"AOI uses tidygeocoder backend term-based geooding Wikipedia APIs. ridgid addresses tidygeocoder great!","code":""},{"path":[]},{"path":"/index.html","id":"places","dir":"","previous_headings":"1. Term based geocoding > Foward (from name to location)","what":"Places","title":"Generating Area's of Interest","text":"","code":"geocode(c('Colorado State University', \"University of Colorado\", 'NOAA')) #> # A tibble: 3 × 5 #>   request                   score arcgis_address                 x     y #> * <chr>                     <int> <chr>                      <dbl> <dbl> #> 1 Colorado State University   100 Colorado State University -105.   40.6 #> 2 University of Colorado      100 University of Colorado    -105.   40.0 #> 3 NOAA                        100 Noaa                       -94.8  29.3"},{"path":"/index.html","id":"addresses","dir":"","previous_headings":"1. Term based geocoding > Foward (from name to location)","what":"Addresses","title":"Generating Area's of Interest","text":"","code":"# Address with POINT representation geocode('500 Linden St, Fort Collins, CO 80524', pt = TRUE)  #> Simple feature collection with 1 feature and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -105.0665 ymin: 40.59362 xmax: -105.0665 ymax: 40.59362 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 6 #>   request             score arcgis_address             geometry     x     y #>   <chr>               <int> <chr>                   <POINT [°]> <dbl> <dbl> #> 1 500 Linden St, For…   100 500 Linden St… (-105.0665 40.59362) -105.  40.6"},{"path":"/index.html","id":"events","dir":"","previous_headings":"1. Term based geocoding > Foward (from name to location)","what":"Events","title":"Generating Area's of Interest","text":"","code":"# Single events geocode(event = 'D-day') #> Simple feature collection with 1 feature and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -0.6 ymin: 49.34 xmax: -0.6 ymax: 49.34 #> Geodetic CRS:  WGS 84 #>        request             title           geometry #> 252854   D-day Normandy landings POINT (-0.6 49.34)  # Multi-location events with BBOX (harvey = geocode(event = 'Hurricane Harvey', bb = TRUE)) #> Simple feature collection with 9 features and 5 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -96.81531 ymin: 3.931777 xmax: -56.01361 ymax: 32.83577 #> Geodetic CRS:  WGS 84 #>            request #> 1 Hurricane+Harvey #> 2 Hurricane+Harvey #> 3 Hurricane+Harvey #> 4 Hurricane+Harvey #> 5 Hurricane+Harvey #> 6 Hurricane+Harvey #> 7 Hurricane+Harvey #> 8 Hurricane+Harvey #> 9 Hurricane+Harvey #>                                                                   all #> 1                                                    Windward Islands #> 2                                                            Suriname #> 3                                                              Guyana #> 4                                                           Nicaragua #> 5                                                            Honduras #> 6                                                              Belize #> 7                                                      Cayman Islands #> 8                                                   Yucatán Peninsula #> 9 Southern and Eastern United States (especially Texas and Louisiana) #>                                                             request.1  score #> 1                                                    Windward Islands 100.00 #> 2                                                            Suriname 100.00 #> 3                                                              Guyana 100.00 #> 4                                                           Nicaragua 100.00 #> 5                                                            Honduras 100.00 #> 6                                                              Belize 100.00 #> 7                                                      Cayman Islands 100.00 #> 8                                                   Yucatán Peninsula 100.00 #> 9 Southern and Eastern United States (especially Texas and Louisiana)  93.73 #>                                     arcgis_address #> 1                                 Windward Islands #> 2                                         Suriname #> 3                                           Guyana #> 4                                        Nicaragua #> 5                                         Honduras #> 6                                           Belize #> 7                                   Cayman Islands #> 8                                Yucatan Peninsula #> 9 Southern Ave & Eastern Ave, Dallas, Texas, 75209 #>                         geometry #> 1 POLYGON ((-96.81531 3.93177... #> 2 POLYGON ((-96.81531 3.93177... #> 3 POLYGON ((-96.81531 3.93177... #> 4 POLYGON ((-96.81531 3.93177... #> 5 POLYGON ((-96.81531 3.93177... #> 6 POLYGON ((-96.81531 3.93177... #> 7 POLYGON ((-96.81531 3.93177... #> 8 POLYGON ((-96.81531 3.93177... #> 9 POLYGON ((-96.81531 3.93177...  mapview::mapview(harvey)"},{"path":"/index.html","id":"reverse-from-location-to-term","dir":"","previous_headings":"1. Term based geocoding","what":"Reverse (from location to term)","title":"Generating Area's of Interest","text":"","code":"geocode_rev(c(37, -119)) #> # A tibble: 1 × 3 #>   address x     y     #>   <chr>   <lgl> <lgl> #> 1 <NA>    NA    NA"},{"path":[]},{"path":"/index.html","id":"state--multi-state","dir":"","previous_headings":"1. Term based geocoding > 2. Consistent queries for domestic (USA) and international boundaries:","what":"State / Multi-state","title":"Generating Area's of Interest","text":"","code":"aoi_get(state = c(\"CO\", \"UT\")) #> Simple feature collection with 2 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -114.0529 ymin: 36.99246 xmax: -102.0415 ymax: 42.0017 #> Geodetic CRS:  WGS 84 #>   state_region state_division feature_code state_name state_abbr     name #> 1            4              8      1779779   Colorado         CO Colorado #> 2            4              8      1455989       Utah         UT     Utah #>   fip_class tiger_class combined_area_code metropolitan_area_code #> 1      <NA>       G4000                 NA                   <NA> #> 2      <NA>       G4000                 NA                   <NA> #>   functional_status    land_area water_area fip_code #> 1                 A 268418796417 1185716938       08 #> 2                 A 213355072799 6529973239       49 #>                         geometry #> 1 MULTIPOLYGON (((-105.155 36... #> 2 MULTIPOLYGON (((-111.5078 4..."},{"path":"/index.html","id":"usa-counties","dir":"","previous_headings":"1. Term based geocoding > 2. Consistent queries for domestic (USA) and international boundaries:","what":"USA Counties","title":"Generating Area's of Interest","text":"","code":"aoi_get(state = \"TX\", county = \"Harris\") #> Simple feature collection with 1 feature and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -95.96073 ymin: 29.49734 xmax: -94.90865 ymax: 30.17061 #> Geodetic CRS:  WGS 84 #>   state_region state_division feature_code state_name state_abbr   name #> 1            3              7      1383886      Texas         TX Harris #>   fip_class tiger_class combined_area_code metropolitan_area_code #> 1        H1       G4020                288                   <NA> #>   functional_status  land_area water_area fip_code #> 1                 A 4421068052  182379558    48201 #>                         geometry #> 1 MULTIPOLYGON (((-95.21642 2..."},{"path":"/index.html","id":"world-countries","dir":"","previous_headings":"1. Term based geocoding > 2. Consistent queries for domestic (USA) and international boundaries:","what":"World Countries","title":"Generating Area's of Interest","text":"","code":"aoi_get(country = \"Ukraine\") #> Simple feature collection with 1 feature and 168 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 22.08561 ymin: 45.29331 xmax: 40.08079 ymax: 52.33507 #> Geodetic CRS:  WGS 84 #>          featurecla scalerank labelrank sovereignt sov_a3 adm0_dif level #> 113 Admin-0 country         1         3    Ukraine    UKR        0     2 #>                  type tlc   admin adm0_a3 geou_dif geounit gu_a3 su_dif subunit #> 113 Sovereign country   1 Ukraine     UKR        0 Ukraine   UKR      0 Ukraine #>     su_a3 brk_diff    name name_long brk_a3 brk_name brk_group abbrev postal #> 113   UKR        0 Ukraine   Ukraine    UKR  Ukraine      <NA>   Ukr.     UA #>     formal_en formal_fr name_ciawf note_adm0 note_brk name_sort name_alt #> 113   Ukraine      <NA>    Ukraine      <NA>     <NA>   Ukraine     <NA> #>     mapcolor7 mapcolor8 mapcolor9 mapcolor13  pop_est pop_rank pop_year gdp_md #> 113         5         1         6          3 44385155       15     2019 153781 #>     gdp_year              economy             income_grp fips_10 iso_a2 #> 113     2019 6. Developing region 4. Lower middle income      UP     UA #>     iso_a2_eh iso_a3 iso_a3_eh iso_n3 iso_n3_eh un_a3 wb_a2 wb_a3   woe_id #> 113        UA    UKR       UKR    804       804   804    UA   UKR 23424976 #>     woe_id_eh                   woe_note adm0_iso adm0_diff adm0_tlc adm0_a3_us #> 113  23424976 Exact WOE match as country      UKR      <NA>      UKR        UKR #>     adm0_a3_fr adm0_a3_ru adm0_a3_es adm0_a3_cn adm0_a3_tw adm0_a3_in #> 113        UKR        UKR        UKR        UKR        UKR        UKR #>     adm0_a3_np adm0_a3_pk adm0_a3_de adm0_a3_gb adm0_a3_br adm0_a3_il #> 113        UKR        UKR        UKR        UKR        UKR        UKR #>     adm0_a3_ps adm0_a3_sa adm0_a3_eg adm0_a3_ma adm0_a3_pt adm0_a3_ar #> 113        UKR        UKR        UKR        UKR        UKR        UKR #>     adm0_a3_jp adm0_a3_ko adm0_a3_vn adm0_a3_tr adm0_a3_id adm0_a3_pl #> 113        UKR        UKR        UKR        UKR        UKR        UKR #>     adm0_a3_gr adm0_a3_it adm0_a3_nl adm0_a3_se adm0_a3_bd adm0_a3_ua #> 113        UKR        UKR        UKR        UKR        UKR        UKR #>     adm0_a3_un adm0_a3_wb continent region_un      subregion #> 113        -99        -99    Europe    Europe Eastern Europe #>                 region_wb name_len long_len abbrev_len tiny homepart min_zoom #> 113 Europe & Central Asia        7        7          4  -99        1        0 #>     min_label max_label  label_x  label_y      ne_id wikidataid  name_ar #> 113       2.7         7 32.14086 49.72474 1159321345       Q212 أوكرانيا #>     name_bn name_de name_en name_es name_fa name_fr  name_el  name_he name_hi #> 113  ইউক্রেন Ukraine Ukraine Ucrania اوکراین Ukraine Ουκρανία אוקראינה    युक्रेन #>     name_hu name_id name_it    name_ja    name_ko  name_nl name_pl name_pt #> 113 Ukrajna Ukraina Ucraina ウクライナ 우크라이나 Oekraïne Ukraina Ucrânia #>     name_ru name_sv name_tr name_uk name_ur name_vi name_zh name_zht #> 113 Украина Ukraina Ukrayna Україна  یوکرین Ukraina  乌克兰   烏克蘭 #>          fclass_iso tlc_diff      fclass_tlc fclass_us fclass_fr fclass_ru #> 113 Admin-0 country     <NA> Admin-0 country      <NA>      <NA>      <NA> #>     fclass_es fclass_cn fclass_tw fclass_in fclass_np fclass_pk fclass_de #> 113      <NA>      <NA>      <NA>      <NA>      <NA>      <NA>      <NA> #>     fclass_gb fclass_br fclass_il fclass_ps fclass_sa fclass_eg fclass_ma #> 113      <NA>      <NA>      <NA>      <NA>      <NA>      <NA>      <NA> #>     fclass_pt fclass_ar fclass_jp fclass_ko fclass_vn fclass_tr fclass_id #> 113      <NA>      <NA>      <NA>      <NA>      <NA>      <NA>      <NA> #>     fclass_pl fclass_gr fclass_it fclass_nl fclass_se fclass_bd fclass_ua #> 113      <NA>      <NA>      <NA>      <NA>      <NA>      <NA>      <NA> #>                           geometry #> 113 MULTIPOLYGON (((31.78599 52..."},{"path":"/index.html","id":"usa-and-world-regions","dir":"","previous_headings":"1. Term based geocoding > 2. Consistent queries for domestic (USA) and international boundaries:","what":"USA and World Regions","title":"Generating Area's of Interest","text":"","code":"World_asia = aoi_get(country = \"Asia\") aoi_describe(World_asia) #> type:         POLYGON (47) #> BBox Area:    101752122 [km^2] #> Centroid:     85.79324 22.51263 [x,y] #> Diminsions:   7617.139 4536.421 [width, height, in miles] #> area:         31270884 [km^2] #> Area/BBox Area:   30.73241 [%]   USA_south = aoi_get(state = \"south\") aoi_describe(USA_south) #> type:         POLYGON (16) #> BBox Area:    5360056 [km^2] #> Centroid:     -90.81484 32.51755 [x,y] #> Diminsions:   1842.137 1120.732 [width, height, in miles] #> area:         2399422 [km^2] #> Area/BBox Area:   44.76487 [%]"},{"path":[]},{"path":"/index.html","id":"place-name-and-diminsions","dir":"","previous_headings":"1. Term based geocoding > 3. Creating flexible AOIs from locations and bounding dimensions.","what":"Place Name and diminsions","title":"Generating Area's of Interest","text":"","code":"# 100 square mile region around Longs Peaks aoi_ext(\"Long Peaks\", wh = 10) #>      xmin      ymin      xmax      ymax  #> 33.852795  3.789964 33.852975  3.790145"},{"path":"/index.html","id":"location-and-diminsions","dir":"","previous_headings":"1. Term based geocoding > 3. Creating flexible AOIs from locations and bounding dimensions.","what":"Location and Diminsions","title":"Generating Area's of Interest","text":"","code":"# 200 square mile region around 37,-119 aoi_ext(xy = c(x = 119, y = 37), wh =  c(20, 10)) #>      xmin      ymin      xmax      ymax  #> 119.00111  37.00024 119.00156  37.00042"},{"path":"/index.html","id":"event-and-diminsions","dir":"","previous_headings":"1. Term based geocoding > 3. Creating flexible AOIs from locations and bounding dimensions.","what":"Event and Diminsions","title":"Generating Area's of Interest","text":"","code":"# 10,000 square meter region around Normandy Landings aoi_ext(geo = \"white house\", wh = 10000, bbox = TRUE) |>    st_as_sf() |>   aoi_map(returnMap = T)"},{"path":"/index.html","id":"id_4-view-and-draw","dir":"","previous_headings":"1. Term based geocoding","what":"4. View and Draw","title":"Generating Area's of Interest","text":"NOTE: following functions require leaflet, shiny leaflelt.extras. Since Suggested Dependencies need install warnings appear. Sometimes useful view created AOIs. aoi_map offers quickly formatted leaflet map (dissimilar mapview may retire).  Alternatively sometimes users need specific AOIs POINTs, bounding boxes, fiat boundaries. AOI provides aoi_draw() allows users interactively draw Area Interest (AOI) using shiny app. object drawn “Save AOI” button pressed, new sf object called ‘aoi’ appear environment. Using aoi_draw() interface","code":"AOI = geocode(geo = c(\"Paris\", \"Amsterdam\", \"Prague\", \"England\"), pt = TRUE)  aoi_map(AOI, returnMap = TRUE) aoi_draw()"},{"path":"/index.html","id":"id_5-programmatic-way-to-interface-with-other-r-packages-that-require-user-defined-aois-or-bounding-boxes","dir":"","previous_headings":"1. Term based geocoding","what":"5. Programmatic way to interface with other R packages that require user defined AOIs or bounding boxes","title":"Generating Area's of Interest","text":"need AOI’s rampant r-spatial community. AOI plays nicely following non-exhaustive list helping users meat utilities without getting hung boundary definition. Please add !","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"1. Term based geocoding","what":"Installation:","title":"Generating Area's of Interest","text":"","code":"remotes::install_github(\"mikejohnson51/AOI\")"},{"path":"/index.html","id":"support","dir":"","previous_headings":"1. Term based geocoding","what":"Support:","title":"Generating Area's of Interest","text":"AOI supported funds UCAR COMET program (2018-2019) NSF Convergence Accelerator Project (2020).","code":""},{"path":"/reference/alt_page.html","id":null,"dir":"Reference","previous_headings":"","what":"Alternate Page Finder — alt_page","title":"Alternate Page Finder — alt_page","text":"Find linked pages wikipedia call","code":""},{"path":"/reference/alt_page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alternate Page Finder — alt_page","text":"","code":"alt_page(loc, pt = FALSE)"},{"path":"/reference/alt_page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alternate Page Finder — alt_page","text":"loc wikipedia structured call pt logical. TRUE point geometery appended returned list()","code":""},{"path":"/reference/alt_page.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alternate Page Finder — alt_page","text":"minimum data.frame lat, long","code":""},{"path":"/reference/alt_page.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alternate Page Finder — alt_page","text":"","code":"if (FALSE) { alt_page(\"Twin_towers\") }"},{"path":"/reference/aoi_buffer.html","id":null,"dir":"Reference","previous_headings":"","what":"Buffer AOI — aoi_buffer","title":"Buffer AOI — aoi_buffer","text":"Add subtract uniform distance /             spatial object either miles kilometers.","code":""},{"path":"/reference/aoi_buffer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Buffer AOI — aoi_buffer","text":"","code":"aoi_buffer(AOI, d, km = FALSE)"},{"path":"/reference/aoi_buffer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Buffer AOI — aoi_buffer","text":"AOI spatial, raster simple features object d numeric.distance modify edge km logical. TRUE distances kilometers, default FALSE distances miles","code":""},{"path":"/reference/aoi_buffer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Buffer AOI — aoi_buffer","text":"spatial geometry class input AOI        (Raster sp returned)","code":""},{"path":"/reference/aoi_buffer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Buffer AOI — aoi_buffer","text":"","code":"if (FALSE) { # get an AOI of 'Garden of the Gods' and add a 2 mile buffer AOI <- aoi_get(x = \"Garden of the Gods\") %>% modify(2)  # get an AOI of 'Garden of the Gods' and add a 2 kilometer buffer getAOI(\"Garden of the Gods\") %>% modify(2, km = TRUE)  # get and AOI for Colorado Springs and subtract 3 miles getAOI(\"Colorado Springs\") %>% modify(-3) }"},{"path":"/reference/aoi_describe.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe an AOI — aoi_describe","title":"Describe an AOI — aoi_describe","text":"Describe spatial (sf/sp/raster) object terms              reproducible AOI  (e.g. aoi_get) parameters.","code":""},{"path":"/reference/aoi_describe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe an AOI — aoi_describe","text":"","code":"aoi_describe(AOI)"},{"path":"/reference/aoi_describe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe an AOI — aoi_describe","text":"AOI spatial object (raster, sf, sp).","code":""},{"path":"/reference/aoi_describe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describe an AOI — aoi_describe","text":"data.frame AOI descriptors","code":""},{"path":"/reference/aoi_describe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Describe an AOI — aoi_describe","text":"","code":"{   fname <- system.file(\"shape/nc.shp\", package = \"sf\")   nc <- sf::read_sf(fname)   aoi_describe(AOI = nc[1, ]) } #> type:\t\t POLYGON (1) #> BBox Area:\t 1771.842 [km^2] #> Centroid:\t -81.49048 36.412 [x,y] #> Diminsions:\t 27.8302 24.5152 [width, height, in miles] #> area:\t\t 1137.108 [km^2] #> Area/BBox Area:\t 64.17661 [%]"},{"path":"/reference/aoi_draw.html","id":null,"dir":"Reference","previous_headings":"","what":"AOI Draw — aoi_draw","title":"AOI Draw — aoi_draw","text":"Interactively draw Area Interest (AOI) using shiny app. object drawn \"Save AOI\" button pressed, new sf object called 'aoi' appear environment.","code":""},{"path":"/reference/aoi_draw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AOI Draw — aoi_draw","text":"","code":"aoi_draw()"},{"path":"/reference/aoi_draw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AOI Draw — aoi_draw","text":"sf object called 'aoi'.","code":""},{"path":"/reference/aoi_draw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AOI Draw — aoi_draw","text":"","code":"if (FALSE) { aoi_draw() }"},{"path":"/reference/aoi_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"AOI extent — aoi_ext","title":"AOI extent — aoi_ext","text":"Build extent surrinding location point (longitude, latitude) based width height.","code":""},{"path":"/reference/aoi_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AOI extent — aoi_ext","text":"","code":"aoi_ext(   geo = NULL,   xy = NULL,   wh = NULL,   units = default_units,   crs = default_crs,   bbox = FALSE )"},{"path":"/reference/aoi_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AOI extent — aoi_ext","text":"geo origion specificed name xy orign specified numeric vector wh width height (can single number) units (see units arg) units units wh expansion crs output crs bbox return bbox object?","code":""},{"path":"/reference/aoi_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AOI extent — aoi_ext","text":"vector sf object","code":""},{"path":"/reference/aoi_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Area of Interest (AOI) geometry — aoi_get","title":"Get Area of Interest (AOI) geometry — aoi_get","text":"Generate spatial geometry :","code":""},{"path":"/reference/aoi_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Area of Interest (AOI) geometry — aoi_get","text":"","code":"aoi_get(   x = NULL,   country = NULL,   state = NULL,   county = NULL,   fip = NULL,   zipcode = NULL,   union = FALSE )"},{"path":"/reference/aoi_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Area of Interest (AOI) geometry — aoi_get","text":"x sf, Spat* object country character. Full name, ISO 3166-1 2 3 digit code. case sensitive. Data comes Natural Earth. state character. Full name two character abbreviation. case sensitive. state = 'conus', lower 48 states returned. state = '', states returned. county character. County name(s). Requires state input. case sensitive '' counties state returned fip 2 5 digit US fip code zipcode US zip code. return centroid. union logical. TRUE objects unioned single object","code":""},{"path":"/reference/aoi_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Area of Interest (AOI) geometry — aoi_get","text":"sf geometry projected EPSG:4326.","code":""},{"path":"/reference/aoi_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Area of Interest (AOI) geometry — aoi_get","text":"","code":"if (FALSE) { # Get AOI for a country aoi_get(country = \"Brazil\") # Get AOI defined by a state(s) aoi_get(state = \"CA\") aoi_get(state = c(\"CA\", \"nevada\"))  # Get AOI defined by all states, or the lower 48 aoi_get(state = \"all\") aoi_get(state = \"conus\")  # Get AOI defined by state & county pair(s) aoi_get(state = \"California\", county = \"Santa Barbara\") aoi_get(state = \"CA\", county = c(\"Santa Barbara\", \"ventura\"))  # Get AOI defined by state & all counties aoi_get(state = \"California\", county = \"all\") }"},{"path":"/reference/aoi_inside.html","id":null,"dir":"Reference","previous_headings":"","what":"Is Inside — aoi_inside","title":"Is Inside — aoi_inside","text":"check see one object inside another","code":""},{"path":"/reference/aoi_inside.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is Inside — aoi_inside","text":"","code":"aoi_inside(AOI, obj, total = TRUE)"},{"path":"/reference/aoi_inside.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is Inside — aoi_inside","text":"AOI object 2 obj object 1 total boolean. TRUE check obj completely inside AOI (vice versa: order matter). FALSE, check least part obj AOI.","code":""},{"path":"/reference/aoi_inside.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is Inside — aoi_inside","text":"boolean value","code":""},{"path":"/reference/aoi_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Leafet map and tool set for AOI — aoi_map","title":"Generate Leafet map and tool set for AOI — aoi_map","text":"Provides precanned leaflet layout checking, refining AOI queries. Useful leaflet tools allow marking points, measuring distances,  panning zooming.","code":""},{"path":"/reference/aoi_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Leafet map and tool set for AOI — aoi_map","text":"","code":"aoi_map(AOI = NULL, returnMap = FALSE)"},{"path":"/reference/aoi_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Leafet map and tool set for AOI — aoi_map","text":"AOI spatial object (raster, sf, sp). Can piped (%>%) aoi_get. AOI = NULL, base map CONUS returned. returnMap logical. FALSE (default) input AOI returned leaflet map printed. TRUE leaflet map returned printed.","code":""},{"path":"/reference/aoi_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Leafet map and tool set for AOI — aoi_map","text":"leaflet html object","code":""},{"path":"/reference/aoi_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Leafet map and tool set for AOI — aoi_map","text":"","code":"if (FALSE) { ## Generate an empty map: aoi_map()  ## Check a defined AOI: AOI <- getAOI(clip = list(\"UCSB\", 10, 10)) aoi_map(AOI)  ## Chain to AOI calls: getAOI(clip = list(\"UCSB\", 10, 10)) %>% aoi_map()  ## Add layers with standard leaflet functions: r <- getAOI(\"UCSB\") %>% # get AOI   HydroData::findNWIS() # get SpatialPointsDataframe of local USGS gages  aoi_map(r$AOI) %>%   addMarkers(data = r$nwis, popup = r$nwis$site_no)  ## Save map for reference: m <- getAOI(\"Kansas City\") %>% aoi_map() htmlwidgets::saveWidget(m, file = paste0(getwd(), \"/myMap.html\")) }"},{"path":"/reference/bbox_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Return bounding box coordinates of a spatial (sp/sf/raster) object — bbox_coords","title":"Return bounding box coordinates of a spatial (sp/sf/raster) object — bbox_coords","text":"function provides simple wrapper around sf::st_bbox              instead returns named data.frame containing              (xmin, ymin, xmax, ymax)","code":""},{"path":"/reference/bbox_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return bounding box coordinates of a spatial (sp/sf/raster) object — bbox_coords","text":"","code":"bbox_coords(x)"},{"path":"/reference/bbox_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return bounding box coordinates of a spatial (sp/sf/raster) object — bbox_coords","text":"x spatial object (sp/sf/raster)","code":""},{"path":"/reference/bbox_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return bounding box coordinates of a spatial (sp/sf/raster) object — bbox_coords","text":"data.frame","code":""},{"path":"/reference/bbox_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Spatial Bounding Box — bbox_get","title":"Get Spatial Bounding Box — bbox_get","text":"Get spatial (sf) representation bounding box input feature type. Input can data.frame, numeric, character, spatial (sp/sf/raster). numeric character order inputs (xmin, xmax, ymin, ymax)","code":""},{"path":"/reference/bbox_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Spatial Bounding Box — bbox_get","text":"","code":"bbox_get(x)"},{"path":"/reference/bbox_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Spatial Bounding Box — bbox_get","text":"x input feature","code":""},{"path":"/reference/bbox_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Spatial Bounding Box — bbox_get","text":"sf polygon","code":""},{"path":"/reference/check_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for a package — check_pkg","title":"Check for a package — check_pkg","text":"Check package","code":""},{"path":"/reference/check_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for a package — check_pkg","text":"","code":"check_pkg(pkg)"},{"path":"/reference/check_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for a package — check_pkg","text":"pkg package name","code":""},{"path":"/reference/default_crs.html","id":null,"dir":"Reference","previous_headings":"","what":"AOI Package — default_crs","title":"AOI Package — default_crs","text":"area interest (AOI) geographic extent. aim package help users create - turning locations, place names, political boundaries servicable representation spatial analysis. package defaults EPSG:4326 See README github, project webpage examples .","code":""},{"path":"/reference/default_crs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AOI Package — default_crs","text":"","code":"default_crs"},{"path":"/reference/default_crs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"AOI Package — default_crs","text":"object class numeric length 1.","code":""},{"path":"/reference/discritize.html","id":null,"dir":"Reference","previous_headings":"","what":"Materialize Grid from File or inputs — discritize","title":"Materialize Grid from File or inputs — discritize","text":"Materialize Grid File inputs","code":""},{"path":"/reference/discritize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Materialize Grid from File or inputs — discritize","text":"","code":"discritize(   ext = NULL,   dim = default_dim,   in_crs = default_crs,   out_crs = default_crs,   spatrast = FALSE,   fillValue = NULL,   showWarnings = TRUE )"},{"path":"/reference/discritize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Materialize Grid from File or inputs — discritize","text":"ext extent (xmin, xmax, ymin, ymax) coordinate system dim dimension (number columns, number rows) in_crs projection input ext out_crs projection output object spatrast SpatRaster object returned? Default FALSE fillValue spatrast TRUE, values fill object showWarnings warnings shown?","code":""},{"path":"/reference/discritize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Materialize Grid from File or inputs — discritize","text":"list SpatRaster object","code":""},{"path":"/reference/dot-domain.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Domain — .domain","title":"Build Domain — .domain","text":"Build Domain","code":""},{"path":"/reference/dot-domain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Domain — .domain","text":"","code":".domain(xy, wh, units = default_units, crs = default_crs, bbox = FALSE)"},{"path":"/reference/dot-domain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Domain — .domain","text":"xy orign specified numeric vector wh width height (can single number) units (see units arg) units units wh expansion crs output crs bbox return bbox object?","code":""},{"path":"/reference/dot-domain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Domain — .domain","text":"vector sf object","code":""},{"path":"/reference/dot-geocode.html","id":null,"dir":"Reference","previous_headings":"","what":".geocode — .geocode","title":".geocode — .geocode","text":".geocode","code":""},{"path":"/reference/dot-geocode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".geocode — .geocode","text":"","code":".geocode(   geo,   pt = FALSE,   bbox = FALSE,   all = FALSE,   method = default_method,   crs = default_crs )"},{"path":"/reference/dot-geocode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".geocode — .geocode","text":"geo character. Place name(s) pt logical. TRUE point geometry created. bbox logical. TRUE bounding box geometry created logical. TRUE point, bbox xy representations returned list method geocoding service used. See ?tidygeocoder::geocode crs desired CRS. Defaults AOI::default_crs","code":""},{"path":"/reference/dot-geocode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".geocode — .geocode","text":"data.frame, sf object, vector","code":""},{"path":"/reference/fip_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a sf data.frame of fipio data — fip_meta","title":"Returns a sf data.frame of fipio data — fip_meta","text":"Returns sf data.frame fipio data","code":""},{"path":"/reference/fip_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a sf data.frame of fipio data — fip_meta","text":"","code":"fip_meta(state, county = NULL)"},{"path":"/reference/fip_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a sf data.frame of fipio data — fip_meta","text":"state State names, state abbreviations, one following: \"\", \"conus\", \"territories\" county County names \"\"","code":""},{"path":"/reference/fip_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a sf data.frame of fipio data — fip_meta","text":"sf data.frame","code":""},{"path":"/reference/fip_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a sf data.frame of fipio data — fip_meta","text":"","code":"if (FALSE) { fip_meta() }"},{"path":"/reference/geocode.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocoding — geocode","title":"Geocoding — geocode","text":"wrapper around tidygeocoding Wikipedia services. Users can request data.frame (default), vector (xy = TRUE), point (pt = TRUE), /bounding box (bbox = TRUE) representation place/location (geo) event. One can given time. single entitiy requested, `geocode` provide data.frame lat/lon values , requested,  point object derived bounding box geo/event. multiple entities requested, returned objects data.frame columns input name-lat-lon; requested, POINT object returned.  , bbox argument return minimum bounding box place names.","code":""},{"path":"/reference/geocode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocoding — geocode","text":"","code":"geocode(   geo = NULL,   event = NULL,   pt = FALSE,   bbox = FALSE,   all = FALSE,   xy = FALSE,   method = default_method,   crs = default_crs )"},{"path":"/reference/geocode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocoding — geocode","text":"geo character. Place name(s) event character. term search Wikipedia pt logical. TRUE point geometry created. bbox logical. TRUE bounding box geometry created logical. TRUE point, bbox xy representations returned list xy logical. TRUE named xy numeric vector created method geocoding service used. See ?tidygeocoder::geocode crs desired CRS. Defaults AOI::default_crs","code":""},{"path":"/reference/geocode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocoding — geocode","text":"data.frame, sf object, vector","code":""},{"path":[]},{"path":"/reference/geocode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geocoding — geocode","text":"","code":"if (FALSE) { ## geocode a single locations geocode(\"UCSB\")  ## geocode a single location and return a POINT object geocode(\"UCSB\", pt = TRUE)  ## geocode a single location and derived bbox of location geocode(location = \"UCSB\", bbox = TRUE)  ## geocode multiple locations geocode(c(\"UCSB\", \"Goleta\", \"Santa Barbara\"))  ## geocode multiple points and generate a minimum bounding box of all locations and spatial points geocode(c(\"UCSB\", \"Goleta\", \"Santa Barbara\"), bbox = T, pt = T) }"},{"path":"/reference/geocodeAOI.html","id":null,"dir":"Reference","previous_headings":"","what":"geocodeOSM — geocodeAOI","title":"geocodeOSM — geocodeAOI","text":"Geocode via Open Street Maps API. geocodeOSM takes input string converts geolocation. Additionally can return location simple features point minimum bounding area location extent.","code":""},{"path":"/reference/geocodeAOI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geocodeOSM — geocodeAOI","text":"","code":"geocodeAOI(location, pt = FALSE, bb = FALSE, all = FALSE, method = \"arcgis\")"},{"path":"/reference/geocodeAOI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"geocodeOSM — geocodeAOI","text":"location place name pt TRUE simple feature point appended returned list bb TRUE OSM bounding area location appended returned list TRUE point bounding box representations returned method geocoding service used. See ?tidygeocoder::geocode","code":""},{"path":"/reference/geocodeAOI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"geocodeOSM — geocodeAOI","text":"minimum data.frame lat, long","code":""},{"path":"/reference/geocodeAOI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"geocodeOSM — geocodeAOI","text":"","code":"if (FALSE) { geocodeAOI(\"UCSB\") geocodeAOI(\"Garden of the Gods\", bb = TRUE) }"},{"path":"/reference/geocode_rev.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse Geocoding — geocode_rev","title":"Reverse Geocoding — geocode_rev","text":"Describe location using ERSI OSM reverse geocoding web-services. service provides traditional reverse geocoding (lat/lon placename) can also use get information place name. xy must contain geographic coordinates!","code":""},{"path":"/reference/geocode_rev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse Geocoding — geocode_rev","text":"","code":"geocode_rev(xy, pt = FALSE, method = default_method)"},{"path":"/reference/geocode_rev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse Geocoding — geocode_rev","text":"xy logical. TRUE named xy numeric vector created pt logical. TRUE point geometry created. method geocoding service used. See ?tidygeocoder::geocode","code":""},{"path":"/reference/geocode_rev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse Geocoding — geocode_rev","text":"data.frame, sf object, vector","code":""},{"path":[]},{"path":"/reference/geocode_rev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse Geocoding — geocode_rev","text":"","code":"if (FALSE) {  geocode_rev(xy = c(38,-115)) }"},{"path":"/reference/geocode_wiki.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocoding Events — geocode_wiki","title":"Geocoding Events — geocode_wiki","text":"wrapper around Wikipedia API return              geo-coordinates requested inputs.","code":""},{"path":"/reference/geocode_wiki.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocoding Events — geocode_wiki","text":"","code":"geocode_wiki(event = NULL, pt = FALSE)"},{"path":"/reference/geocode_wiki.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocoding Events — geocode_wiki","text":"event character. term search wikipeida pt logical. TRUE point geometery appended returned list()","code":""},{"path":"/reference/geocode_wiki.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocoding Events — geocode_wiki","text":"data.frame lat/lon coordinates","code":""},{"path":[]},{"path":"/reference/geocode_wiki.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geocoding Events — geocode_wiki","text":"","code":"if (FALSE) { ## geocode an Agency geocode_wiki(\"NOAA\")  ## geocode an event geocode_wiki(\"I have a dream speech\")  ## geocode a n event geocode_wiki(\"D day\")  ## geocode a product geocode_wiki(\"New York Times\")  ## geocode an event geocode_wiki(\"Hurricane Harvey\") }"},{"path":"/reference/getClip.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert clip unit ot geometry — getClip","title":"Convert clip unit ot geometry — getClip","text":"getClip generates Spatial object based point; bounding box dimisions; relation point.","code":""},{"path":"/reference/getClip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert clip unit ot geometry — getClip","text":"","code":"getClip(x, km = FALSE)"},{"path":"/reference/getClip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert clip unit ot geometry — getClip","text":"location Defined location lat, long pair height Define height desired bounding box miles width Define width desired bounding box miles origin Define position point respect bounding box. Default set center. Options include: \"center\" \"lowerleft\" \"lowerright\" \"upperright\" \"upperleft\"","code":""},{"path":"/reference/getClip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert clip unit ot geometry — getClip","text":"SpatialPolygons object projected EPSG:4269.","code":""},{"path":"/reference/getFiat.html","id":null,"dir":"Reference","previous_headings":"","what":"Get State of County Spatial Boundary — getFiat","title":"Get State of County Spatial Boundary — getFiat","text":"Get State County Spatial Boundary","code":""},{"path":"/reference/getFiat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get State of County Spatial Boundary — getFiat","text":"","code":"getFiat(country = NULL, state = NULL, county = NULL, fip = NULL)"},{"path":"/reference/getFiat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get State of County Spatial Boundary — getFiat","text":"country character. Full name, ISO 3166-1 2 3 digit code. case senstive state character. Full name two character abbreviation. case sensitive county character. Provide county name(s). Requires 'state' input. bb logical. TRUE bounding geometry state/county returned,  default FALSE returns fiat geometries","code":""},{"path":"/reference/getFiat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get State of County Spatial Boundary — getFiat","text":"SpatialPolygons object projected EPSG:4269.","code":""},{"path":"/reference/getFiat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get State of County Spatial Boundary — getFiat","text":"getFiat returns SpatialPolygons object defiend state /county. Boundaries come 2017 US Census TIGER Dataset projected EPSG:4269.","code":""},{"path":"/reference/getFiat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get State of County Spatial Boundary — getFiat","text":"","code":"if (FALSE) { # Get Single State getFiat(state = \"CA\")  # Get Multi-state getFiat(state = c(\"CA\", \"Utah\", \"Nevada\"))  # Get County getFiat(state = \"CA\", county = \"San Luis Obispo\")  # Get Muli-county getFiat(state = \"CA\", county = c(\"San Luis Obispo\", \"Santa Barbara\", \"Ventura\")) }"},{"path":"/reference/list_states.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a data.frame of valid states with abbreviations and regions — list_states","title":"Returns a data.frame of valid states with abbreviations and regions — list_states","text":"Returns data.frame valid states abbreviations regions","code":""},{"path":"/reference/list_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a data.frame of valid states with abbreviations and regions — list_states","text":"","code":"list_states()"},{"path":"/reference/list_states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a data.frame of valid states with abbreviations and regions — list_states","text":"data.frame states abbreviation region","code":""},{"path":"/reference/list_states.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a data.frame of valid states with abbreviations and regions — list_states","text":"","code":"if (FALSE) { list_states() }"},{"path":"/reference/make_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert raster and sp objects to sf — make_sf","title":"Convert raster and sp objects to sf — make_sf","text":"Convert raster sp objects sf","code":""},{"path":"/reference/make_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert raster and sp objects to sf — make_sf","text":"","code":"make_sf(x)"},{"path":"/reference/make_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert raster and sp objects to sf — make_sf","text":"x spatial object","code":""},{"path":"/reference/make_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert raster and sp objects to sf — make_sf","text":"sf object","code":""},{"path":"/reference/zipcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"USA Zipcode Centroids — zipcodes","title":"USA Zipcode Centroids — zipcodes","text":"dataset containing centriods USA zipcodes","code":""},{"path":"/reference/zipcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"USA Zipcode Centroids — zipcodes","text":"","code":"zipcodes"},{"path":"/reference/zipcodes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"USA Zipcode Centroids — zipcodes","text":"object class data.frame 33144 rows 3 columns.","code":""},{"path":"/reference/zipcodes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"USA Zipcode Centroids — zipcodes","text":"USABoundaries Data Package","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"AOI 0.3.0 (2023-09)","text":"Change original OpenStreetMap geocoder tidygeocoder due new restrictions Previously, allowed following place based area requests: c(GEO, distance, distance) –> POLYGON c(lat, lng, distance, distance) –> POLYGON now support: c(lat, lng) –> POINT c(lat, lng, distance) –> POLYGON moved aoi_get aoi_ext uses: geo xy wh materialize_grid zonal moved called discritize Works terra raster objects","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"AOI 0.2.0 (2021-03)","text":"aoi_draw() - Interactively draw Area Interest (AOI) using shiny app.","code":""}]
